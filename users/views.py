import json
import tweepy
from tweepy.parsers import JSONParser
from django.core.urlresolvers import reverse
from django.shortcuts import render, render_to_response, RequestContext
from django.contrib.auth.models import User
from django.contrib.auth.forms import UserCreationForm
from django.http import HttpResponseRedirect, HttpRequest, HttpResponse
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
from users.models import Chat_user
from  main.twitter_data import CONSUMER_KEY, CONSUMER_SECRET


# CONSUMER_KEY and CONSUMER_SECRET are generated by me for an app
# It is saved in main/twitter_data.py and imported here
#
redirect_url = 'https://127.0.0.1:8000/home'

def user_exists(screen_name):
    chat_user =  User.objects.filter(username = screen_name)
    print screen_name
    if chat_user:
        return True
    return False

def create_user(screen_name, password, read_only):
    django_user = User.objects.create_user(
        username = screen_name,
        password = password)
    django_user.save()
    chat_user = Chat_user(user = django_user, read_only = read_only)
    chat_user.save()

def sign_in_by_twitter(request):
    auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET, redirect_url)
    url = auth.get_authorization_url()
    
    request.session['twitter_request_token_key'] = auth.request_token.key
    request.session['twitter_request_token_secret'] = auth.request_token.secret
                
    return HttpResponseRedirect(url)

def login_user(request):
    return sign_in_by_twitter(request)

def home(request):
    if 'twitter_request_token_key' not in request.session: 
        return HttpResponseRedirect("login")

    auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)
    auth.set_request_token(request.GET['oauth_token'], request.GET['oauth_verifier'])

    if 'twitter_access_token_key' not in request.session:
        access_token = auth.get_access_token(request.GET['oauth_verifier'])
        request.session['twitter_access_token_key'] = access_token.key
        request.session['twitter_access_token_secret'] = access_token.secret
    else:
        auth.set_access_token(request.session['twitter_access_token_key'], request.session['twitter_access_token_secret'])

    api = tweepy.API(auth_handler=auth)
    user = api.me()
    screen_name = user._json['screen_name']
    request.session['screen_name'] = screen_name
    exists = user_exists(screen_name)

    context = RequestContext(request)
    if request.POST.get("create_user", ""):
        password = request.POST['password']
        read_only_set = request.POST.get("role","nie dziala")
        read_only = False
        if read_only_set == "set":
           read_only = True
        user = create_user(screen_name, password, read_only)
        user = authenticate(username = screen_name, password = password)
        login(request, user)
        return HttpResponseRedirect("chat")
    elif request.POST.get("login", ""): 
        password = request.POST['password']
        user = authenticate(username = screen_name, password = password)
        login(request, user)
        return HttpResponseRedirect("chat")

    return render_to_response("home.html",
                                locals(),
                                context_instance=RequestContext(request))
@login_required
def logout_user(request):
    logout(request)
    return HttpResponseRedirect("home")
